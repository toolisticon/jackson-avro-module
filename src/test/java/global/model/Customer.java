/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package global.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

/** A customer */
@org.apache.avro.specific.AvroGenerated
public class Customer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3578167753665390225L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Customer\",\"namespace\":\"global.model\",\"doc\":\"A customer\",\"fields\":[{\"name\":\"billingAddress\",\"type\":{\"type\":\"record\",\"name\":\"Address\",\"doc\":\"An address\",\"fields\":[{\"name\":\"street\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"number\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"zip\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}]}},{\"name\":\"deliveryAddress\",\"type\":\"Address\"},{\"name\":\"mailAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"phoneNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Customer> ENCODER =
      new BinaryMessageEncoder<Customer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Customer> DECODER =
      new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Customer> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Customer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Customer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Customer to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Customer from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Customer instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Customer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private Address billingAddress;
  private Address deliveryAddress;
  private String mailAddress;
  private String phoneNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Customer() {}

  /**
   * All-args constructor.
   * @param billingAddress The new value for billingAddress
   * @param deliveryAddress The new value for deliveryAddress
   * @param mailAddress The new value for mailAddress
   * @param phoneNumber The new value for phoneNumber
   */
  public Customer(Address billingAddress, Address deliveryAddress, String mailAddress, String phoneNumber) {
    this.billingAddress = billingAddress;
    this.deliveryAddress = deliveryAddress;
    this.mailAddress = mailAddress;
    this.phoneNumber = phoneNumber;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return billingAddress;
    case 1: return deliveryAddress;
    case 2: return mailAddress;
    case 3: return phoneNumber;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: billingAddress = (Address)value$; break;
    case 1: deliveryAddress = (Address)value$; break;
    case 2: mailAddress = value$ != null ? value$.toString() : null; break;
    case 3: phoneNumber = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'billingAddress' field.
   * @return The value of the 'billingAddress' field.
   */
  public Address getBillingAddress() {
    return billingAddress;
  }


  /**
   * Sets the value of the 'billingAddress' field.
   * @param value the value to set.
   */
  public void setBillingAddress(Address value) {
    this.billingAddress = value;
  }

  /**
   * Gets the value of the 'deliveryAddress' field.
   * @return The value of the 'deliveryAddress' field.
   */
  public Address getDeliveryAddress() {
    return deliveryAddress;
  }


  /**
   * Sets the value of the 'deliveryAddress' field.
   * @param value the value to set.
   */
  public void setDeliveryAddress(Address value) {
    this.deliveryAddress = value;
  }

  /**
   * Gets the value of the 'mailAddress' field.
   * @return The value of the 'mailAddress' field.
   */
  public String getMailAddress() {
    return mailAddress;
  }


  /**
   * Sets the value of the 'mailAddress' field.
   * @param value the value to set.
   */
  public void setMailAddress(String value) {
    this.mailAddress = value;
  }

  /**
   * Gets the value of the 'phoneNumber' field.
   * @return The value of the 'phoneNumber' field.
   */
  public String getPhoneNumber() {
    return phoneNumber;
  }


  /**
   * Sets the value of the 'phoneNumber' field.
   * @param value the value to set.
   */
  public void setPhoneNumber(String value) {
    this.phoneNumber = value;
  }

  /**
   * Creates a new Customer RecordBuilder.
   * @return A new Customer RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Customer RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Customer instance.
   * @param other The existing instance to copy.
   * @return A new Customer RecordBuilder
   */
  public static Builder newBuilder(Customer other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for Customer instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Customer>
    implements org.apache.avro.data.RecordBuilder<Customer> {

    private Address billingAddress;
    private Address.Builder billingAddressBuilder;
    private Address deliveryAddress;
    private Address.Builder deliveryAddressBuilder;
    private String mailAddress;
    private String phoneNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.billingAddress)) {
        this.billingAddress = data().deepCopy(fields()[0].schema(), other.billingAddress);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasBillingAddressBuilder()) {
        this.billingAddressBuilder = Address.newBuilder(other.getBillingAddressBuilder());
      }
      if (isValidValue(fields()[1], other.deliveryAddress)) {
        this.deliveryAddress = data().deepCopy(fields()[1].schema(), other.deliveryAddress);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasDeliveryAddressBuilder()) {
        this.deliveryAddressBuilder = Address.newBuilder(other.getDeliveryAddressBuilder());
      }
      if (isValidValue(fields()[2], other.mailAddress)) {
        this.mailAddress = data().deepCopy(fields()[2].schema(), other.mailAddress);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[3].schema(), other.phoneNumber);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Customer instance
     * @param other The existing instance to copy.
     */
    private Builder(Customer other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.billingAddress)) {
        this.billingAddress = data().deepCopy(fields()[0].schema(), other.billingAddress);
        fieldSetFlags()[0] = true;
      }
      this.billingAddressBuilder = null;
      if (isValidValue(fields()[1], other.deliveryAddress)) {
        this.deliveryAddress = data().deepCopy(fields()[1].schema(), other.deliveryAddress);
        fieldSetFlags()[1] = true;
      }
      this.deliveryAddressBuilder = null;
      if (isValidValue(fields()[2], other.mailAddress)) {
        this.mailAddress = data().deepCopy(fields()[2].schema(), other.mailAddress);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[3].schema(), other.phoneNumber);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'billingAddress' field.
      * @return The value.
      */
    public Address getBillingAddress() {
      return billingAddress;
    }


    /**
      * Sets the value of the 'billingAddress' field.
      * @param value The value of 'billingAddress'.
      * @return This builder.
      */
    public Builder setBillingAddress(Address value) {
      validate(fields()[0], value);
      this.billingAddressBuilder = null;
      this.billingAddress = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'billingAddress' field has been set.
      * @return True if the 'billingAddress' field has been set, false otherwise.
      */
    public boolean hasBillingAddress() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'billingAddress' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Address.Builder getBillingAddressBuilder() {
      if (billingAddressBuilder == null) {
        if (hasBillingAddress()) {
          setBillingAddressBuilder(Address.newBuilder(billingAddress));
        } else {
          setBillingAddressBuilder(Address.newBuilder());
        }
      }
      return billingAddressBuilder;
    }

    /**
     * Sets the Builder instance for the 'billingAddress' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Builder setBillingAddressBuilder(Address.Builder value) {
      clearBillingAddress();
      billingAddressBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'billingAddress' field has an active Builder instance
     * @return True if the 'billingAddress' field has an active Builder instance
     */
    public boolean hasBillingAddressBuilder() {
      return billingAddressBuilder != null;
    }

    /**
      * Clears the value of the 'billingAddress' field.
      * @return This builder.
      */
    public Builder clearBillingAddress() {
      billingAddress = null;
      billingAddressBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'deliveryAddress' field.
      * @return The value.
      */
    public Address getDeliveryAddress() {
      return deliveryAddress;
    }


    /**
      * Sets the value of the 'deliveryAddress' field.
      * @param value The value of 'deliveryAddress'.
      * @return This builder.
      */
    public Builder setDeliveryAddress(Address value) {
      validate(fields()[1], value);
      this.deliveryAddressBuilder = null;
      this.deliveryAddress = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'deliveryAddress' field has been set.
      * @return True if the 'deliveryAddress' field has been set, false otherwise.
      */
    public boolean hasDeliveryAddress() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'deliveryAddress' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Address.Builder getDeliveryAddressBuilder() {
      if (deliveryAddressBuilder == null) {
        if (hasDeliveryAddress()) {
          setDeliveryAddressBuilder(Address.newBuilder(deliveryAddress));
        } else {
          setDeliveryAddressBuilder(Address.newBuilder());
        }
      }
      return deliveryAddressBuilder;
    }

    /**
     * Sets the Builder instance for the 'deliveryAddress' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Builder setDeliveryAddressBuilder(Address.Builder value) {
      clearDeliveryAddress();
      deliveryAddressBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'deliveryAddress' field has an active Builder instance
     * @return True if the 'deliveryAddress' field has an active Builder instance
     */
    public boolean hasDeliveryAddressBuilder() {
      return deliveryAddressBuilder != null;
    }

    /**
      * Clears the value of the 'deliveryAddress' field.
      * @return This builder.
      */
    public Builder clearDeliveryAddress() {
      deliveryAddress = null;
      deliveryAddressBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mailAddress' field.
      * @return The value.
      */
    public String getMailAddress() {
      return mailAddress;
    }


    /**
      * Sets the value of the 'mailAddress' field.
      * @param value The value of 'mailAddress'.
      * @return This builder.
      */
    public Builder setMailAddress(String value) {
      validate(fields()[2], value);
      this.mailAddress = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mailAddress' field has been set.
      * @return True if the 'mailAddress' field has been set, false otherwise.
      */
    public boolean hasMailAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mailAddress' field.
      * @return This builder.
      */
    public Builder clearMailAddress() {
      mailAddress = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'phoneNumber' field.
      * @return The value.
      */
    public String getPhoneNumber() {
      return phoneNumber;
    }


    /**
      * Sets the value of the 'phoneNumber' field.
      * @param value The value of 'phoneNumber'.
      * @return This builder.
      */
    public Builder setPhoneNumber(String value) {
      validate(fields()[3], value);
      this.phoneNumber = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'phoneNumber' field has been set.
      * @return True if the 'phoneNumber' field has been set, false otherwise.
      */
    public boolean hasPhoneNumber() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'phoneNumber' field.
      * @return This builder.
      */
    public Builder clearPhoneNumber() {
      phoneNumber = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Customer build() {
      try {
        Customer record = new Customer();
        if (billingAddressBuilder != null) {
          try {
            record.billingAddress = this.billingAddressBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("billingAddress"));
            throw e;
          }
        } else {
          record.billingAddress = fieldSetFlags()[0] ? this.billingAddress : (Address) defaultValue(fields()[0]);
        }
        if (deliveryAddressBuilder != null) {
          try {
            record.deliveryAddress = this.deliveryAddressBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("deliveryAddress"));
            throw e;
          }
        } else {
          record.deliveryAddress = fieldSetFlags()[1] ? this.deliveryAddress : (Address) defaultValue(fields()[1]);
        }
        record.mailAddress = fieldSetFlags()[2] ? this.mailAddress : (String) defaultValue(fields()[2]);
        record.phoneNumber = fieldSetFlags()[3] ? this.phoneNumber : (String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Customer>
    WRITER$ = (org.apache.avro.io.DatumWriter<Customer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Customer>
    READER$ = (org.apache.avro.io.DatumReader<Customer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.billingAddress.customEncode(out);

    this.deliveryAddress.customEncode(out);

    out.writeString(this.mailAddress);

    out.writeString(this.phoneNumber);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.billingAddress == null) {
        this.billingAddress = new Address();
      }
      this.billingAddress.customDecode(in);

      if (this.deliveryAddress == null) {
        this.deliveryAddress = new Address();
      }
      this.deliveryAddress.customDecode(in);

      this.mailAddress = in.readString();

      this.phoneNumber = in.readString();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.billingAddress == null) {
            this.billingAddress = new Address();
          }
          this.billingAddress.customDecode(in);
          break;

        case 1:
          if (this.deliveryAddress == null) {
            this.deliveryAddress = new Address();
          }
          this.deliveryAddress.customDecode(in);
          break;

        case 2:
          this.mailAddress = in.readString();
          break;

        case 3:
          this.phoneNumber = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










